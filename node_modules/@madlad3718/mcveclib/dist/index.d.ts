import { Vector3, Direction, RGB, Vector2, VectorXZ } from '@minecraft/server';

/**
 * Includes various 3D vector functions and values.
 */
declare namespace Vec3 {
    /**
     * The zero vector.
     *
     * Value: **[`0`, `0`, `0`]**
     */
    const Zero: Vector3;
    /**
     * The one vector.
     *
     * Value: **[`1`, `1`, `1`]**
     */
    const One: Vector3;
    /**
     * The unit vector in the up direction.
     *
     * Value: **[`0`, `1`, `0`]**
     */
    const Up: Vector3;
    /**
     * The unit vector in the down direction.
     *
     * Value: **[`0`, `-1`, `0`]**
     */
    const Down: Vector3;
    /**
     * The unit vector in the north direction.
     *
     * Value: **[`0`, `0`, `-1`]**
     */
    const North: Vector3;
    /**
     * The unit vector in the south direction.
     *
     * Value: **[`0`, `0`, `1`]**
     */
    const South: Vector3;
    /**
     * The unit vector in the east direction.
     *
     * Value: **[`1`, `0`, `0`]**
     */
    const East: Vector3;
    /**
     * The unit vector in the west direction.
     *
     * Value: **[`-1`, `0`, `0`]**
     */
    const West: Vector3;
    /**
     * The standard x basis vector.
     *
     * Value: **[`1`, `0`, `0`]**
     */
    const X: Vector3;
    /**
     * The standard y basis vector.
     *
     * Value: **[`0`, `1`, `0`]**
     */
    const Y: Vector3;
    /**
     * The standard z basis vector.
     *
     * Value: **[`0`, `0`, `1`]**
     */
    const Z: Vector3;
    /**
     * Tests if a value is of {@link Vector3} type.
     * @param v The specified value.
     * @returns Returns **True** if the value contains the `Vector3` properties,
     * otherwise **False**.
     */
    function isVector3(v: any): v is Vector3;
    /**
     * Constructs a {@link Vector3} from the given value.
     * @param x The value to set each vector component to.
     */
    function from(x: number): Vector3;
    /**
     * Constructs a {@link Vector3} from the given array.
     * @param x An array of 3 numbers corresponding to vector components.
     */
    function from(x: number[]): Vector3;
    /**
     * Constructs a {@link Vector3} from the given values.
     * @param x The x component of the vector.
     * @param y The y component of the vector.
     * @param z The z component of the vector.
     */
    function from(x: number, y: number, z: number): Vector3;
    /**
     * Returns the corresponding unit vector to a
     * value of the `minecraft:block_face` or the
     * `minecraft:cardinal_direction` block traits.
     * @param face The value of the block trait.
     * @throws Throws an error when `face` is not of the proper type.
     */
    function fromBlockFace(face: string): Vector3;
    /**
     * Converts a vector to a direction string from the
     * `minecraft:block_face` or `minecraft:cardinal_direction`
     * block traits.
     * @param v The specified vector.
     */
    function toBlockFace(v: Vector3): string;
    /**
     * Returns the corresponding {@link Vector3} to the given direction.
     * @param d The specified direction value.
     */
    function fromDirection(d: Direction): Vector3;
    /**
     * Converts a vector to a {@link Direction}.
     * @param v The specified vector.
     * @returns The nearest {@link Direction} to the vector.
     */
    function toDirection(v: Vector3): Direction;
    /**
     * Constructs a {@link Vector3} from the corresponding components in an {@link RGB} value.
     * @param c The specified RGB value.
     * @returns An {@link RGB} value with corresponding components to those in `v`.
     */
    function fromRGB(c: RGB): Vector3;
    /**
     * Converts a {@link Vector3} into an {@link RGB} value.
     * @param v The specified vector.
     * @returns An {@link RGB} value with corresponding components to those in `v`.
     */
    function toRGB(v: Vector3): RGB;
    /**
     * Converts a unit vector to a rotation vector.
     * @param v The specified unit vector.
     */
    function toRotation(v: Vector3): Vector2;
    /**
     * Converts a vector into an array of three numbers.
     * @param v The specified vector.
     * @returns An array containing the three components of `v`.
     */
    function toArray(v: Vector3): number[];
    /**
     * Stringifies a vector to the form "x y z".
     * @param v The specified vector.
     */
    function toString(v: Vector3): string;
    /**
     * Parses a vector from its stringified form.
     * @param s The vector in stringified form.
     * @returns A {@link Vector3} parsed from the string.
     */
    function parse(s: string): Vector3;
    /**
     * Determines if the specified vector is `NaN`.
     * @param v The specified vector.
     * @returns Returns **True** if the `v` parameter is `NaN`. Otherwise, **False**.
     */
    function isNaN(v: Vector3): boolean;
    /**
     * Determines if the specified vector is infinite.
     * @param v The specified vector.
     * @returns Returns **True** if the `v` parameter is `+Infinity` or `-Infinity`. Otherwise, **False**.
     */
    function isInf(v: Vector3): boolean;
    /**
     * Determines if the specified vector is finite.
     * @param v The specified vector.
     * @returns Returns **True** if the `v` parameter is finite; otherwise **False**.
     */
    function isFinite(v: Vector3): boolean;
    /**
     * Determines if any of the components of `v` are non-zero.
     * @param v The specified vector.
     * @returns Returns `true` if at least one of the components of `v` is non-zero, otherwise `false`.
     */
    function any(v: Vector3): boolean;
    /**
     * Determines if all of the components of `v` are non-zero.
     * @param v The specified vector.
     * @returns Returns `true` if all the components of `v` are non-zero, otherwise `false`.
     */
    function all(v: Vector3): boolean;
    /**
     * Determines if any of the components of `u` are greater than the corresponding
     * components in `v`.
     * @param u The first vector.
     * @param v The second vector.
     * @returns A vector containing the component-wise results of the greater than comparison.
     *
     * `1` is returned if the expression resulted true, and `0` if it resulted false.
     */
    function greaterThan(u: Vector3, v: Vector3): Vector3;
    /**
     * Determines if any of the components of `u` are less than the corresponding
     * components in `v`.
     * @param u The first vector.
     * @param v The second vector.
     * @returns A vector containing the component-wise results of the less than comparison.
     *
     * `1` is returned if the expression resulted true, and `0` if it resulted false.
     */
    function lessThan(u: Vector3, v: Vector3): Vector3;
    /**
     * Determines if any of the components of `u` are greater than or equal to the corresponding
     * components in `v`.
     * @param u The first vector.
     * @param v The second vector.
     * @returns A vector containing the component-wise results of the greater than or equal to comparison.
     *
     * `1` is returned if the expression resulted true, and `0` if it resulted false.
     */
    function greaterEqual(u: Vector3, v: Vector3): Vector3;
    /**
     * Determines if any of the components of `u` are less than or equal to the corresponding
     * components in `v`.
     * @param u The first vector.
     * @param v The second vector.
     * @returns A vector containing the component-wise results of the less than or equal to comparison.
     *
     * `1` is returned if the expression resulted true, and `0` if it resulted false.
     */
    function lessEqual(u: Vector3, v: Vector3): Vector3;
    /**
     * Determines if two vectors are equal.
     * @param u The first specified vector.
     * @param v The second specified vector.
     * @returns `true` if every component of `u` is equal to those in `v`, otherwise `false`.
     */
    function equal(u: Vector3, v: Vector3): boolean;
    /**
     * Selects the lesser of `u` and `v`.
     * @param u The `u` input value.
     * @param v The `v` input value.
     * @return The `u` or `v` parameter, whichever is the smallest value.
     */
    function min(u: Vector3, v: Vector3): Vector3;
    /**
     * Selects the greater of `u` and `v`.
     * @param u The `u` input value.
     * @param v The `v` input value.
     * @return The `u` or `v` parameter, whichever is the largest value.
     */
    function max(u: Vector3, v: Vector3): Vector3;
    /**
     * Clamps the specified vector to the specified minimum and maximum values.
     * @param v A value to clamp.
     * @param min The specified minimum value.
     * @param max The specified maximum value.
     * @returns The clamped value for the `v` parameter.
     */
    function clamp(v: Vector3, min: Vector3, max: Vector3): Vector3;
    /**
     * Clamps the specified vector within the range 0 to 1.
     * @param v The specified vector.
     */
    function saturate(v: Vector3): Vector3;
    /**
     * Returns the sign of `v`.
     * @param v The input value.
     * @returns `-1` if `v` is less than zero; `0` if `v` equals zero; and `1` if `v` is greater than zero.
     */
    function sign(v: Vector3): Vector3;
    /**
     * Returns the largest integer that is less than or equal to the specified vector.
     * @param v The specified vector.
     * @returns The largest integer value that is less than or equal to the `v` parameter.
     */
    function floor(v: Vector3): Vector3;
    /**
     * Returns the smallest integer value that is greater than or equal to the specified vector.
     * @param v The specified vector.
     * @returns The smallest integer value that is greater than or equal to the `v` parameter.
     */
    function ceil(v: Vector3): Vector3;
    /**
     * Returns the fractional (or decimal) part of `v`; which is greater than or equal to 0 and less than 1.
     * @param v The specified vector.
     * @returns The fractional part of the `v` parameter.
     */
    function frac(v: Vector3): Vector3;
    /**
     * Rounds the specified vector to the nearest integer. Halfway cases are rounded to the nearest even.
     * @param v The specified vector.
     * @returns The `v` parameter, rounded to the nearest integer.
     */
    function round(v: Vector3): Vector3;
    /**
     * Returns the remainder of `u`/`v`.
     * @param u The dividend.
     * @param v The divisor.
     * @returns The remainder of the `u` parameter divided by the `v` parameter.
     * @remarks The remainder is calculated such that *x* = *i* * *y* + *f*, where *i* is an integer,
     * *f* has the same sign as *x*, and the absolute value of *f* is less than the absolute value of *y*.
     */
    function mod(u: Vector3, v: Vector3): Vector3;
    /**
     * Negates a specified vector `v`.
     * @param v The specified vector.
     * @returns The negation of the `v` parameter.
     */
    function neg(v: Vector3): Vector3;
    /**
     * Returns the absolute value of the specified vector.
     * @param v The specified vector.
     * @returns The absolute value of the `v` parameter.
     */
    function abs(v: Vector3): Vector3;
    /**
     * Adds a set of vectors together.
     * @param v The initial vector.
     * @param args The vectors to add to `v`.
     * @returns The result of the addition of all argument vectors.
     */
    function add(v: Vector3, ...args: Vector3[]): Vector3;
    /**
     * Subtracts a set of vectors from one another.
     * @param v The initial vector.
     * @param args The vectors to subtract from `v`.
     * @returns The result of the subtraction of all argument vectors.
     */
    function sub(v: Vector3, ...args: Vector3[]): Vector3;
    /**
     * Multiplies a vector `v` by a scalar value `s`.
     * @param v The multiplicand vector.
     * @param s The scalar multiplier.
     * @returns The image of the vector `v` under scalar multiplication of `s`.
     */
    function mul(v: Vector3, s: number): Vector3;
    /**
     * Multiplies a vector `u` by a vector `v`.
     * @param v The multiplicand vector.
     * @param s The multiplier vector.
     * @returns The component-wise multiplication of `u` and `v`.
     */
    function mul(u: Vector3, v: Vector3): Vector3;
    /**
     * Divides a vector `v` by a scalar value `s`.
     * @param v The dividend vector.
     * @param s The scalar divisor.
     */
    function div(v: Vector3, s: number): Vector3;
    /**
     * Divides a vector `u` by a vector `v`.
     * @param v The dividend vector.
     * @param s The divisor vector.
     * @returns The component-wise division of `u` and `v`.
     */
    function div(u: Vector3, v: Vector3): Vector3;
    /**
     * Returns the square root of the specified vector, per component.
     * @param v The specified vector.
     * @returns The square root of the `v` parameter, per component.
     */
    function sqrt(v: Vector3): Vector3;
    /**
     * Returns the base-e exponential of the specified vector.
     * @param v The specified vector.
     * @returns The base-e exponential of the `v` parameter.
     */
    function exp(v: Vector3): Vector3;
    /**
     * Returns the base 2 exponential of the specified vector.
     * @param v The specified vector.
     * @returns The base 2 exponential of the `v` parameter.
     */
    function exp2(v: Vector3): Vector3;
    /**
     * Returns the base-e logarithm of the specified vector.
     * @param v The specified vector.
     * @returns The base-e logarithm of the `v` parameter.
     */
    function log(v: Vector3): Vector3;
    /**
     * Returns the base-2 logarithm of the specified vector.
     * @param v The specified vector.
     * @returns The base-2 logarithm of the `v` parameter.
     */
    function log2(v: Vector3): Vector3;
    /**
     * Returns the base-10 logarithm of the specified vector.
     * @param v The specified vector.
     * @returns The base-10 logarithm of the `v` parameter.
     */
    function log10(v: Vector3): Vector3;
    /**
     * Returns the specified vector raised to a scalar power.
     * @param v The specified vector.
     * @param p The specified scalar power.
     * @returns The component-wise exponentiation of `v` to the power of `p`.
     */
    function pow(v: Vector3, p: number): Vector3;
    /**
     * Returns the specified vector raised to a specified power.
     * @param u The specified vector.
     * @param v The specified power.
     * @returns The component-wise exponentiation of `u` to the power of `v`.
     */
    function pow(u: Vector3, v: Vector3): Vector3;
    /**
     * Returns the sine of the specified vector.
     * @param v The specified vector, in radians.
     * @returns The sine of the `v` parameter.
     */
    function sin(v: Vector3): Vector3;
    /**
     * Returns the arcsine of the specified vector.
     * @param v The specified vector.
     * @returns The arcsine of the `v` parameter.
     */
    function asin(v: Vector3): Vector3;
    /**
     * Returns the hyperbolic sine of the specified vector.
     * @param v The specified vector, in radians.
     * @returns The hyperbolic sine of the `v` parameter.
     */
    function sinh(v: Vector3): Vector3;
    /**
     * Returns the hyperbolic arcsine of the specified vector.
     * @param v The specified vector.
     * @returns The hyperbolic arcsine of the `v` parameter.
     */
    function asinh(v: Vector3): Vector3;
    /**
     * Returns the cosine of the specified vector.
     * @param v The specified vector, in radians.
     * @returns The cosine of the `v` parameter.
     */
    function cos(v: Vector3): Vector3;
    /**
     * Returns the arccosine of the specified vector.
     * @param v The specified vector. Each component should be a value within the range of -1 to 1.
     * @returns The arccosine of the `v` parameter.
     */
    function acos(v: Vector3): Vector3;
    /**
     * Returns the hyperbolic cosine of the specified vector.
     * @param v The specified vector, in radians.
     * @returns The hyperbolic cosine of the `v` parameter.
     */
    function cosh(v: Vector3): Vector3;
    /**
     * Returns the hyperbolic arccosine of the specified vector.
     * @param v The specified vector. Each component should be a value within the range of -1 to 1.
     * @returns The hyperbolic arccosine of the `v` parameter.
     */
    function acosh(v: Vector3): Vector3;
    /**
     * Returns the tangent of the specified vector.
     * @param v The specified vector, in radians.
     * @returns The tangent of the `v` parameter.
     */
    function tan(v: Vector3): Vector3;
    /**
     * Returns the arctangent of the specified vector.
     * @param v The specified vector.
     * @returns The arctangent of the `v` parameter. This value is within the range of -π/2 to π/2.
     */
    function atan(v: Vector3): Vector3;
    /**
     * Returns the hyperbolic tangent of the specified vector.
     * @param v The specified vector, in radians.
     * @returns The hyperbolic tangent of the `v` parameter.
     */
    function tanh(v: Vector3): Vector3;
    /**
     * Returns the hyperbolic arctangent of the specified vector.
     * @param v The specified vector.
     * @returns The hyperbolic arctangent of the `v` parameter.
     */
    function atanh(v: Vector3): Vector3;
    /**
     * Returns the vector one unit above the given vector.
     * @param v The specified vector.
     */
    function above(v: Vector3): Vector3;
    /**
     * Adds a scalar multiple of the `Up` vector to another.
     * @param v The specified vector.
     * @param s The specified scalar multiple.
     */
    function above(v: Vector3, s: number): Vector3;
    /**
     * Returns the vector one unit below the given vector.
     * @param v The specified vector.
     */
    function below(v: Vector3): Vector3;
    /**
     * Adds a scalar multiple of the `Down` vector to another.
     * @param v The specified vector.
     * @param s The specified scalar multiple.
     */
    function below(v: Vector3, s: number): Vector3;
    /**
     * Returns the vector one unit north of the given vector.
     * @param v The specified vector.
     */
    function north(v: Vector3): Vector3;
    /**
     * Adds a scalar multiple of the `North` vector to another.
     * @param v The specified vector.
     * @param s The specified scalar multiple.
     */
    function north(v: Vector3, s: number): Vector3;
    /**
     * Returns the vector one unit south of the given vector.
     * @param v The specified vector.
     */
    function south(v: Vector3): Vector3;
    /**
     * Adds a scalar multiple of the `South` vector to another.
     * @param v The specified vector.
     * @param s The specified scalar multiple.
     */
    function south(v: Vector3, s: number): Vector3;
    /**
     * Returns the vector one unit east of the given vector.
     * @param v The specified vector.
     */
    function east(v: Vector3): Vector3;
    /**
     * Adds a scalar multiple of the `East` vector to another.
     * @param v The specified vector.
     * @param s The specified scalar multiple.
     */
    function east(v: Vector3, s: number): Vector3;
    /**
     * Returns the vector one unit west of the given vector.
     * @param v The specified vector.
     */
    function west(v: Vector3): Vector3;
    /**
     * Adds a scalar multiple of the `West` vector to another.
     * @param v The specified vector.
     * @param s The specified scalar multiple.
     */
    function west(v: Vector3, s: number): Vector3;
    /**
     * Returns the dot product of two vectors.
     * @param u The first vector.
     * @param v The second vector.
     * @returns The dot product of `u` and `v`.
     */
    function dot(u: Vector3, v: Vector3): number;
    /**
     * Returns the cross product of two vectors.
     * @param u The first vector.
     * @param v The second vector.
     * @returns The cross product of `u` and `v`.
     */
    function cross(u: Vector3, v: Vector3): Vector3;
    /**
     * Returns the length of the specified vector.
     * @param v The specified vector.
     * @returns A scalar that represents the length of `v`.
     */
    function length(v: Vector3): number;
    /**
     * Normalizes the specified vector according to `v` / length(`v`).
     * @param v The specified vector.
     * @returns The normalized vector `v`.
     */
    function normalize(v: Vector3): Vector3;
    /**
     * Returns a distance scalar between two vectors.
     * @param u The first vector to compare.
     * @param v The second vector to compare.
     * @returns A scalar value that represents the distance between `u` and `v`.
     */
    function distance(u: Vector3, v: Vector3): number;
    /**
     * Projects a vector `u` onto a vector `v`.
     * @param u The first value.
     * @param v The second value.
     * @returns The vector projection of `u` onto `v`.
     */
    function project(u: Vector3, v: Vector3): Vector3;
    /**
     * Gets the rejection a vector `u` from a vector `v`.
     * @param u The first value.
     * @param v The second value.
     * @returns The vector rejection of `u` from `v`.
     * @remarks This function is equivalent to *u* - project(*u*, *v*).
     */
    function reject(u: Vector3, v: Vector3): Vector3;
    /**
     * Returns a reflection vector using an incident ray and a surface normal.
     * @param i An incident vector.
     * @param n A normal vector.
     * @returns A reflection vector.
     * @remarks This function calculates the reflection vector using the following formula: *v* = *i* - 2 * *n* * dot(*i*, *n*).
     */
    function reflect(i: Vector3, n: Vector3): Vector3;
    /**
     * Returns a refraction vector using an incident ray, a surface normal, and a refraction index.
     * @param i An incident direction vector.
     * @param n A surface normal vector.
     * @param eta The ratio of refractive indices between the incident medium and the refracting medium.
     * @returns A refraction vector.
     */
    function refract(i: Vector3, n: Vector3, eta: number): Vector3;
    /**
     * Performs a linear interpolation between two vectors.
     * @param u The first vector.
     * @param v The second vector.
     * @param t The interpolant value between `u` and `v`.
     * @returns The result of the linear interpolation.
     * @remarks Linear interpolation is based on the following formula: *x*\*(1-*s*) + *y*\**s* which can
     * equivalently be written as *x* + *s*\*(*y*-*x*).
     */
    function lerp(u: Vector3, v: Vector3, t: number): Vector3;
    /**
     * Performs a spherical linear interpolation.
     * @param u The first unit vector.
     * @param v The second unit vector.
     * @param t A value that spherically interpolates between `u` and `v`.
     * @returns The result of the spherical linear interpolation.
     */
    function slerp(u: Vector3, v: Vector3, t: number): Vector3;
    /**
     * Rotates a vector `v` accross an axis `k` by angle `t`.
     * @param v The vector to be rotated.
     * @param k The unit rotation axis vector.
     * @param t The angle in radians to rotate about the axis.
     * @returns The input parameter `v` rotated about `k` by the specified angle `t`.
     */
    function rotate(v: Vector3, k: Vector3, t: number): Vector3;
}

interface Matrix3 {
    m11: number;
    m12: number;
    m13: number;
    m21: number;
    m22: number;
    m23: number;
    m31: number;
    m32: number;
    m33: number;
}
/**
 * Includes various 3x3 matrix functions and values.
 */
declare namespace Mat3 {
    /**
     * The identity matrix.
     *
     * Value:
     *
     * **[`1`, `0`, `0`]**
     *
     * **[`0`, `1`, `0`]**
     *
     * **[`0`, `0`, `1`]**
     */
    const Identity: Matrix3;
    /**
     * Determines if a value implements the {@link Matrix3} interface.
     * @param m The specified value.
     * @returns Returns **True** if the value contains the `Matrix3` properties,
     * otherwise **False**.
     */
    function isMatrix3(m: any): m is Matrix3;
    /**
     * Constructs a {@link Matrix3} from an array of numbers.
     */
    function from(m: number[]): Matrix3;
    /**
     * Constructs a {@link Matrix3} from three column vectors.
     * @param u The first vector.
     * @param v The second vector.
     * @param w The third vector.
     */
    function from(u: Vector3, v: Vector3, w: Vector3): Matrix3;
    /**
     * Returns the first column vector in a matrix.
     * @param m The specified matrix.
     */
    function c1(m: Matrix3): Vector3;
    /**
     * Returns the second column vector in a matrix.
     * @param m The specified matrix.
     */
    function c2(m: Matrix3): Vector3;
    /**
     * Returns the third column vector in a matrix.
     * @param m The specified matrix.
     */
    function c3(m: Matrix3): Vector3;
    /**
     * Returns the first row vector in a matrix.
     * @param m The specified matrix.
     */
    function r1(m: Matrix3): Vector3;
    /**
     * Returns the second row vector in a matrix.
     * @param m The specified matrix.
     */
    function r2(m: Matrix3): Vector3;
    /**
     * Returns the third row vector in a matrix.
     * @param m The specified matrix.
     */
    function r3(m: Matrix3): Vector3;
    /**
     * Multiplies a matrix by a scalar value.
     * @param m The specified matrix.
     * @param s The specified scalar.
     */
    function mul(m: Matrix3, s: number): Matrix3;
    /**
     * Multiplies a vector by a matrix.
     * @param m The specified matrix.
     * @param v The specified vector.
     * @returns The result of the matrix/vector product between `m` and `v`.
     */
    function mul(m: Matrix3, v: Vector3): Vector3;
    /**
     * Multiplies a matrix by another matrix.
     * @param m The multiplier matrix.
     * @param n The multiplicand matrix.
     */
    function mul(m: Matrix3, n: Matrix3): Matrix3;
    /**
     * Returns the trace of a matrix.
     * @param m The specified matrix.
     */
    function trace(m: Matrix3): number;
    /**
     * Computes the determinant of a matrix.
     * @param m The specified matrix.
     */
    function determinant(m: Matrix3): number;
    /**
     * Transposes a matrix.
     * @param m The specified matrix.
     */
    function transpose(m: Matrix3): Matrix3;
    /**
     * Returns the cofactor matrix formed from a given matrix.
     * @param m The specified matrix.
     */
    function cofactor(m: Matrix3): Matrix3;
    /**
     * Returns the adjugate matrix formed from a given matrix.
     * @param m The specified matrix.
     */
    function adjugate(m: Matrix3): Matrix3;
    /**
     * Computes the inverse of a given matrix.
     * @param m The specified matrix.
     * @throws Throws an error when the matrix is not invertible.
     */
    function inverse(m: Matrix3): Matrix3;
    /**
     * Constructs an axis-aligned Tangent-Normal-Binormal Matrix around a given normal vector.
     * @param n The specified normal vector.
     * @returns A TNB Matrix based on the specified vector.
     */
    function buildTNB(n: Vector3): Matrix3;
}

/**
 * Includes various 2D vector functions and values.
 */
declare namespace Vec2 {
    /**
     * The zero vector.
     *
     * Value: **[`0`, `0`]**
     */
    const Zero: Vector2;
    /**
     * The one vector.
     *
     * Value: **[`1`, `1`]**
     */
    const One: Vector2;
    /**
     * The unit vector in the up direction.
     *
     * Value: **[`0`, `1`]**
     */
    const Up: Vector2;
    /**
     * The unit vector in the down direction.
     *
     * Value: **[`0`, `-1`]**
     */
    const Down: Vector2;
    /**
     * The unit vector in the left direction.
     *
     * Value: **[`-1`, `0`]**
     */
    const Left: Vector2;
    /**
     * The unit vector in the right direction.
     *
     * Value: **[`1`, `0`]**
     */
    const Right: Vector2;
    /**
     * The standard x basis vector.
     *
     * Value: **[`1`, `0`]**
     */
    const X: Vector2;
    /**
     * The standard y basis vector.
     *
     * Value: **[`0`, `1`]**
     */
    const Y: Vector2;
    /**
     * Tests if a value is of {@link Vector2} type.
     * @param v The specified value.
     * @returns Returns **True** if the value contains the `Vector2` properties,
     * otherwise **False**.
     */
    function isVector2(v: any): v is Vector2;
    /**
     * Constructs a {@link Vector2} from the given value.
     * @param x The value to set each vector component to.
     */
    function from(x: number): Vector2;
    /**
     * Constructs a {@link Vector2} from the given array.
     * @param x An array of 2 numbers corresponding to vector components.
     */
    function from(x: number[]): Vector2;
    /**
     * Constructs a {@link Vector2} from the given values.
     * @param x The x component of the vector.
     * @param y The y component of the vector.
     */
    function from(x: number, y: number): Vector2;
    /**
     * Constructs a {@link Vector2} from a {@link VectorXZ} value.
     * @param v The specified vectorXZ value.
     * @returns A {@link Vector2} with the Y component set to `v`'s z component.
     */
    function fromVectorXZ(v: VectorXZ): Vector2;
    /**
     * Converts a {@link Vector2} into a {@link VectorXZ}.
     * @param v The specified vector.
     * @returns A {@link VectorXZ} with the Z component set to `v`'s y component.
     */
    function toVectorXZ(v: Vector2): VectorXZ;
    /**
     * Converts a vector into an array of two numbers.
     * @param v The specified vector.
     * @returns An array containing the two components of `v`.
     */
    function toArray(v: Vector2): number[];
    /**
     * Stringifies a vector to the form "x y".
     * @param v The specified vector.
     */
    function toString(v: Vector2): string;
    /**
     * Parses a vector from its stringified form.
     * @param s The vector in stringified form.
     * @returns A {@link Vector2} parsed from the string.
     */
    function parse(s: string): Vector2;
    /**
     * Determines if the specified vector is `NaN`.
     * @param v The specified vector.
     * @returns Returns **True** if the `v` parameter is `NaN`. Otherwise, **False**.
     */
    function isNaN(v: Vector2): boolean;
    /**
     * Determines if the specified vector is infinite.
     * @param v The specified vector.
     * @returns Returns **True** if the `v` parameter is `+Infinity` or `-Infinity`. Otherwise, **False**.
     */
    function isInf(v: Vector2): boolean;
    /**
     * Determines if the specified vector is finite.
     * @param v The specified vector.
     * @returns Returns **True** if the `v` parameter is finite; otherwise **False**.
     */
    function isFinite(v: Vector2): boolean;
    /**
     * Determines if any of the components of `v` are non-zero.
     * @param v The specified vector.
     * @returns Returns `true` if at least one of the components of `v` is non-zero, otherwise `false`.
     */
    function any(v: Vector2): boolean;
    /**
     * Determines if all of the components of `v` are non-zero.
     * @param v The specified vector.
     * @returns Returns `true` if all the components of `v` are non-zero, otherwise `false`.
     */
    function all(v: Vector2): boolean;
    /**
     * Determines if any of the components of `u` are greater than the corresponding
     * components in `v`.
     * @param u The first vector.
     * @param v The second vector.
     * @returns A vector containing the component-wise results of the greater than comparison.
     *
     * `1` is returned if the expression resulted true, and `0` if it resulted false.
     */
    function greaterThan(u: Vector2, v: Vector2): Vector2;
    /**
     * Determines if any of the components of `u` are less than the corresponding
     * components in `v`.
     * @param u The first vector.
     * @param v The second vector.
     * @returns A vector containing the component-wise results of the less than comparison.
     *
     * `1` is returned if the expression resulted true, and `0` if it resulted false.
     */
    function lessThan(u: Vector2, v: Vector2): Vector2;
    /**
     * Determines if any of the components of `u` are greater than or equal to the corresponding
     * components in `v`.
     * @param u The first vector.
     * @param v The second vector.
     * @returns A vector containing the component-wise results of the greater than or equal to comparison.
     *
     * `1` is returned if the expression resulted true, and `0` if it resulted false.
     */
    function greaterEqual(u: Vector2, v: Vector2): Vector2;
    /**
     * Determines if any of the components of `u` are less than or equal to the corresponding
     * components in `v`.
     * @param u The first vector.
     * @param v The second vector.
     * @returns A vector containing the component-wise results of the less than or equal to comparison.
     *
     * `1` is returned if the expression resulted true, and `0` if it resulted false.
     */
    function lessEqual(u: Vector2, v: Vector2): Vector2;
    /**
     * Determines if two vectors are equal.
     * @param u The first specified vector.
     * @param v The second specified vector.
     * @returns `true` if every component of `u` is equal to those in `v`, otherwise `false`.
     */
    function equal(u: Vector2, v: Vector2): boolean;
    /**
     * Selects the lesser of `u` and `v`.
     * @param u The `u` input value.
     * @param v The `v` input value.
     * @return The `u` or `v` parameter, whichever is the smallest value.
     */
    function min(u: Vector2, v: Vector2): Vector2;
    /**
     * Selects the greater of `u` and `v`.
     * @param u The `u` input value.
     * @param v The `v` input value.
     * @return The `u` or `v` parameter, whichever is the largest value.
     */
    function max(u: Vector2, v: Vector2): Vector2;
    /**
     * Clamps the specified vector to the specified minimum and maximum values.
     * @param v A value to clamp.
     * @param min The specified minimum value.
     * @param max The specified maximum value.
     * @returns The clamped value for the `v` parameter.
     */
    function clamp(v: Vector2, min: Vector2, max: Vector2): Vector2;
    /**
     * Clamps the specified vector within the range 0 to 1.
     * @param v The specified vector.
     */
    function saturate(v: Vector2): Vector2;
    /**
     * Returns the sign of `v`.
     * @param v The input value.
     * @returns `-1` if `v` is less than zero; `0` if `v` equals zero; and `1` if `v` is greater than zero.
     */
    function sign(v: Vector2): Vector2;
    /**
     * Returns the largest integer that is less than or equal to the specified vector.
     * @param v The specified vector.
     * @returns The largest integer value that is less than or equal to the `v` parameter.
     */
    function floor(v: Vector2): Vector2;
    /**
     * Returns the smallest integer value that is greater than or equal to the specified vector.
     * @param v The specified vector.
     * @returns The smallest integer value that is greater than or equal to the `v` parameter.
     */
    function ceil(v: Vector2): Vector2;
    /**
     * Returns the fractional (or decimal) part of `v`; which is greater than or equal to 0 and less than 1.
     * @param v The specified vector.
     * @returns The fractional part of the `v` parameter.
     */
    function frac(v: Vector2): Vector2;
    /**
     * Rounds the specified vector to the nearest integer. Halfway cases are rounded to the nearest even.
     * @param v The specified vector.
     * @returns The `v` parameter, rounded to the nearest integer.
     */
    function round(v: Vector2): Vector2;
    /**
     * Returns the remainder of `u`/`v`.
     * @param u The dividend.
     * @param v The divisor.
     * @returns The remainder of the `u` parameter divided by the `v` parameter.
     * @remarks The remainder is calculated such that *x* = *i* * *y* + *f*, where *i* is an integer,
     * *f* has the same sign as *x*, and the absolute value of *f* is less than the absolute value of *y*.
     */
    function mod(u: Vector2, v: Vector2): Vector2;
    /**
     * Negates a specified vector `v`.
     * @param v The specified vector.
     * @returns The negation of the `v` parameter.
     */
    function neg(v: Vector2): Vector2;
    /**
     * Returns the absolute value of the specified vector.
     * @param v The specified vector.
     * @returns The absolute value of the `v` parameter.
     */
    function abs(v: Vector2): Vector2;
    /**
     * Adds a set of vectors together.
     * @param v The initial vector.
     * @param args The vectors to add to `v`.
     * @returns The result of the addition of all argument vectors.
     */
    function add(v: Vector2, ...args: Vector2[]): Vector2;
    /**
     * Subtracts a set of vectors from one another.
     * @param v The initial vector.
     * @param args The vectors to subtract from `v`.
     * @returns The result of the subtraction of all argument vectors.
     */
    function sub(v: Vector2, ...args: Vector2[]): Vector2;
    /**
     * Multiplies a vector `v` by a scalar value `s`.
     * @param v The multiplicand vector.
     * @param s The scalar multiplier.
     * @returns The image of the vector `v` under scalar multiplication of `s`.
     */
    function mul(v: Vector2, s: number): Vector2;
    /**
     * Multiplies a vector `u` by a vector `v`.
     * @param v The multiplicand vector.
     * @param s The multiplier vector.
     * @returns The component-wise multiplication of `u` and `v`.
     */
    function mul(u: Vector2, v: Vector2): Vector2;
    /**
     * Divides a vector `v` by a scalar value `s`.
     * @param v The dividend vector.
     * @param s The scalar divisor.
     */
    function div(v: Vector2, s: number): Vector2;
    /**
     * Divides a vector `u` by a vector `v`.
     * @param v The dividend vector.
     * @param s The divisor vector.
     * @returns The component-wise division of `u` and `v`.
     */
    function div(u: Vector2, v: Vector2): Vector2;
    /**
     * Returns the square root of the specified vector, per component.
     * @param v The specified vector.
     * @returns The square root of the `v` parameter, per component.
     */
    function sqrt(v: Vector2): Vector2;
    /**
     * Returns the base-e exponential of the specified vector.
     * @param v The specified vector.
     * @returns The base-e exponential of the `v` parameter.
     */
    function exp(v: Vector2): Vector2;
    /**
     * Returns the base 2 exponential of the specified vector.
     * @param v The specified vector.
     * @returns The base 2 exponential of the `v` parameter.
     */
    function exp2(v: Vector2): Vector2;
    /**
     * Returns the base-e logarithm of the specified vector.
     * @param v The specified vector.
     * @returns The base-e logarithm of the `v` parameter.
     */
    function log(v: Vector2): Vector2;
    /**
     * Returns the base-2 logarithm of the specified vector.
     * @param v The specified vector.
     * @returns The base-2 logarithm of the `v` parameter.
     */
    function log2(v: Vector2): Vector2;
    /**
     * Returns the base-10 logarithm of the specified vector.
     * @param v The specified vector.
     * @returns The base-10 logarithm of the `v` parameter.
     */
    function log10(v: Vector2): Vector2;
    /**
     * Returns the specified vector raised to a scalar power.
     * @param v The specified vector.
     * @param p The specified scalar power.
     * @returns The component-wise exponentiation of `v` to the power of `p`.
     */
    function pow(v: Vector2, p: number): Vector2;
    /**
     * Returns the specified vector raised to a specified power.
     * @param u The specified vector.
     * @param v The specified power.
     * @returns The component-wise exponentiation of `u` to the power of `v`.
     */
    function pow(u: Vector2, v: Vector2): Vector2;
    /**
     * Returns the sine of the specified vector.
     * @param v The specified vector, in radians.
     * @returns The sine of the `v` parameter.
     */
    function sin(v: Vector2): Vector2;
    /**
     * Returns the arcsine of the specified vector.
     * @param v The specified vector.
     * @returns The arcsine of the `v` parameter.
     */
    function asin(v: Vector2): Vector2;
    /**
     * Returns the hyperbolic sine of the specified vector.
     * @param v The specified vector, in radians.
     * @returns The hyperbolic sine of the `v` parameter.
     */
    function sinh(v: Vector2): Vector2;
    /**
     * Returns the hyperbolic arcsine of the specified vector.
     * @param v The specified vector.
     * @returns The hyperbolic arcsine of the `v` parameter.
     */
    function asinh(v: Vector2): Vector2;
    /**
     * Returns the cosine of the specified vector.
     * @param v The specified vector, in radians.
     * @returns The cosine of the `v` parameter.
     */
    function cos(v: Vector2): Vector2;
    /**
     * Returns the arccosine of the specified vector.
     * @param v The specified vector. Each component should be a value within the range of -1 to 1.
     * @returns The arccosine of the `v` parameter.
     */
    function acos(v: Vector2): Vector2;
    /**
     * Returns the hyperbolic cosine of the specified vector.
     * @param v The specified vector, in radians.
     * @returns The hyperbolic cosine of the `v` parameter.
     */
    function cosh(v: Vector2): Vector2;
    /**
     * Returns the hyperbolic arccosine of the specified vector.
     * @param v The specified vector. Each component should be a value within the range of -1 to 1.
     * @returns The hyperbolic arccosine of the `v` parameter.
     */
    function acosh(v: Vector2): Vector2;
    /**
     * Returns the tangent of the specified vector.
     * @param v The specified vector, in radians.
     * @returns The tangent of the `v` parameter.
     */
    function tan(v: Vector2): Vector2;
    /**
     * Returns the arctangent of the specified vector.
     * @param v The specified vector.
     * @returns The arctangent of the `v` parameter. This value is within the range of -π/2 to π/2.
     */
    function atan(v: Vector2): Vector2;
    /**
     * Returns the hyperbolic tangent of the specified vector.
     * @param v The specified vector, in radians.
     * @returns The hyperbolic tangent of the `v` parameter.
     */
    function tanh(v: Vector2): Vector2;
    /**
     * Returns the hyperbolic arctangent of the specified vector.
     * @param v The specified vector.
     * @returns The hyperbolic arctangent of the `v` parameter.
     */
    function atanh(v: Vector2): Vector2;
    /**
     * Returns the dot product of two vectors.
     * @param u The first vector.
     * @param v The second vector.
     * @returns The dot product of `u` and `v`.
     */
    function dot(u: Vector2, v: Vector2): number;
    /**
     * Returns the wedge product of two vectors.
     * @param u The first vector.
     * @param v The second vector.
     * @returns The wedge product of `u` and `v`.
     */
    function wedge(u: Vector2, v: Vector2): number;
    /**
     * Returns the length of the specified vector.
     * @param v The specified vector.
     * @returns A scalar that represents the length of `v`.
     */
    function length(v: Vector2): number;
    /**
     * Normalizes the specified vector according to `v` / length(`v`).
     * @param v The specified vector.
     * @returns The normalized vector `v`.
     */
    function normalize(v: Vector2): Vector2;
    /**
     * Returns a distance scalar between two vectors.
     * @param u The first vector to compare.
     * @param v The second vector to compare.
     * @returns A scalar value that represents the distance between `u` and `v`.
     */
    function distance(u: Vector2, v: Vector2): number;
    /**
     * Projects a vector `u` onto a vector `v`.
     * @param u The first value.
     * @param v The second value.
     * @returns The vector projection of `u` onto `v`.
     */
    function project(u: Vector2, v: Vector2): Vector2;
    /**
     * Gets the rejection a vector `u` from a vector `v`.
     * @param u The first value.
     * @param v The second value.
     * @returns The vector rejection of `u` from `v`.
     * @remarks This function is equivalent to *u* - project(*u*, *v*).
     */
    function reject(u: Vector2, v: Vector2): Vector2;
    /**
     * Returns a reflection vector using an incident ray and a surface normal.
     * @param i An incident vector.
     * @param n A normal vector.
     * @returns A reflection vector.
     * @remarks This function calculates the reflection vector using the following formula: *v* = *i* - 2 * *n* * dot(*i*, *n*).
     */
    function reflect(i: Vector2, n: Vector2): Vector2;
    /**
     * Returns a refraction vector using an incident ray, a surface normal, and a refraction index.
     * @param i An incident direction vector.
     * @param n A surface normal vector.
     * @param e The ratio of refractive indices between the incident medium and the refracting medium.
     * @returns A refraction vector.
     */
    function refract(i: Vector2, n: Vector2, e: number): Vector2;
    /**
     * Performs a linear interpolation between two vectors.
     * @param u The first vector.
     * @param v The second vector.
     * @param t The interpolant value between `u` and `v`.
     * @returns The result of the linear interpolation.
     * @remarks Linear interpolation is based on the following formula: *x*\*(1-*s*) + *y*\**s* which can
     * equivalently be written as *x* + *s*\*(*y*-*x*).
     */
    function lerp(u: Vector2, v: Vector2, t: number): Vector2;
    /**
     * Performs a spherical linear interpolation.
     * @param u The first unit vector.
     * @param v The second unit vector.
     * @param t A value that spherically interpolates between `u` and `v`.
     * @returns The result of the spherical linear interpolation.
     */
    function slerp(u: Vector2, v: Vector2, t: number): Vector2;
    /**
     * Rotates a vector `v` by angle `t`.
     * @param v The vector to be rotated.
     * @param t The angle in radians to rotate.
     * @returns The input parameter `v` rotated by the specified angle `t`.
     */
    function rotate(v: Vector2, t: number): Vector2;
}

interface Matrix2 {
    m11: number;
    m12: number;
    m21: number;
    m22: number;
}
/**
 * Includes various 2x2 matrix functions and values.
 */
declare namespace Mat2 {
    /**
     * The identity matrix.
     *
     * Value:
     *
     * **[`1`, `0`]**
     *
     * **[`0`, `1`]**
     */
    const Identity: Matrix2;
    /**
     * Determines if a value implements the {@link Matrix2} interface.
     * @param m The specified value.
     * @returns Returns **True** if the value contains the `Matrix2` properties,
     * otherwise **False**.
     */
    function isMatrix2(m: any): m is Matrix2;
    /**
     * Constructs a {@link Matrix2} from an array of numbers.
     */
    function from(m: number[]): Matrix2;
    /**
     * Constructs a {@link Matrix2} from two column vectors.
     * @param u The first vector.
     * @param v The second vector.
     */
    function from(u: Vector2, v: Vector2): Matrix2;
    /**
     * Returns the first column vector in a matrix.
     * @param m The specified matrix.
     */
    function c1(m: Matrix2): Vector2;
    /**
     * Returns the second column vector in a matrix.
     * @param m The specified matrix.
     */
    function c2(m: Matrix2): Vector2;
    /**
     * Returns the first row vector in a matrix.
     * @param m The specified matrix.
     */
    function r1(m: Matrix2): Vector2;
    /**
     * Returns the second row vector in a matrix.
     * @param m The specified matrix.
     */
    function r2(m: Matrix2): Vector2;
    /**
     * Multiplies a matrix by a scalar value.
     * @param m The specified matrix.
     * @param s The specified scalar.
     */
    function mul(m: Matrix2, s: number): Matrix2;
    /**
     * Multiplies a vector by a matrix.
     * @param m The specified matrix.
     * @param v The specified vector.
     * @returns The result of the matrix/vector product between `m` and `v`.
     */
    function mul(m: Matrix2, v: Vector2): Vector2;
    /**
     * Multiplies a matrix by another matrix.
     * @param m The multiplier matrix.
     * @param n The multiplicand matrix.
     */
    function mul(m: Matrix2, n: Matrix2): Matrix2;
    /**
     * Returns the trace of a matrix.
     * @param m The specified matrix.
     */
    function trace(m: Matrix2): number;
    /**
     * Computes the determinant of a matrix.
     * @param m The specified matrix.
     */
    function determinant(m: Matrix2): number;
    /**
     * Transposes a matrix.
     * @param m The specified matrix.
     */
    function transpose(m: Matrix2): Matrix2;
    /**
     * Returns the cofactor matrix formed from a given matrix.
     * @param m The specified matrix.
     */
    function cofactor(m: Matrix2): Matrix2;
    /**
     * Returns the adjugate matrix formed from a given matrix.
     * @param m The specified matrix.
     */
    function adjugate(m: Matrix2): Matrix2;
    /**
     * Computes the inverse of a given matrix.
     * @param m The specified matrix.
     * @throws Throws an error when the matrix is not invertible.
     */
    function inverse(m: Matrix2): Matrix2;
}

/**
 * Includes various methods for generating random vectors from different distributions.
 */
declare namespace RandVec {
    /**
     * Generates two pseudorandom numbers between 0 and 1.
     * @returns A two-dimensional vector with pseudorandom components.
     */
    function random2(): Vector2;
    /**
     * Generates three pseudorandom numbers between 0 and 1.
     * @returns A three-dimensional vector with pseudorandom components.
     */
    function random3(): Vector3;
    /**
     * Generates a uniformly distributed random point on a circle.
     * @returns A random uniformly distributed point in a circle.
     */
    function circle(): Vector2;
    /**
     * Generates a uniformly distributed random point within a disk.
     * @returns A random uniformly distributed point on a disk.
     */
    function disk(): Vector2;
    /**
     * Generates a uniformly distributed random point on the surface of a sphere.
     * @remarks The y-axis is treated as the zenith in this distribution.
     * @returns A random uniformly distributed point on a sphere.
     */
    function sphere(): Vector3;
    /**
     * Generates a uniformly distributed random point on the surface of a hemisphere.
     * @remarks The y-axis is treated as the zenith in this distribution.
     * @returns A random uniformly distributed point on a hemisphere.
     */
    function hemisphere(): Vector3;
    /**
     * Generates a randomly distributed point on the surface of a cosine-weighted hemisphere.
     * @remarks The y-axis is treated as the zenith in this distribution.
     * @returns A random point on a cosine-weighted hemisphere.
     */
    function cosHemisphere(): Vector3;
    /**
     * Generates a uniformly distributed random point on the surface of a spherical cap.
     * @remarks The y-axis is treated as the zenith in this distribution.
     * @param t The maximum deviation angle from the zenith on the cap.
     * @returns A random uniformly distributed point on a spherical cap.
     */
    function cap(t: number): Vector3;
}

export { Mat2, Mat3, type Matrix2, type Matrix3, RandVec, Vec2, Vec3 };
